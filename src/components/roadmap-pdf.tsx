'use client';

import React, { useMemo } from 'react';
import type { GeneratePersonalizedRoadmapOutput } from '@/ai/flows/generate-personalized-roadmap';
import type { FormValues } from '@/lib/types';
import {
  List,
  Wrench,
  Calendar,
  FlaskConical,
  Lightbulb,
  Briefcase,
  TrendingUp,
  BarChart,
  User,
} from 'lucide-react';


const parseList = (text: string | undefined): string[] => {
  if (!text) return [];
  return text.split('\n').map(s => s.replace(/^- /, '').trim()).filter(Boolean);
};


const PDFSection = ({ title, icon: Icon, children }: { title: string; icon: React.ElementType; children: React.ReactNode }) => (
    <div className="mb-4 break-inside-avoid">
        <div className="flex items-center gap-3 mb-2">
            <Icon className="w-5 h-5 text-primary" />
            <h3 className="text-base font-semibold text-gray-800">{title}</h3>
        </div>
        <div className="pl-8 text-sm text-gray-600 space-y-1">
           {Array.isArray(children) ? (
                <ul className="space-y-1 list-disc list-outside">
                    {React.Children.map(children, (child, index) => <li key={index} className="pl-2">{child}</li>)}
                </ul>
           ) : (
                <p className="text-sm italic text-gray-700">"{children}"</p>
           )}
        </div>
    </div>
);


export const RoadmapPDF = ({ data, studentData, innerRef }: { data: GeneratePersonalizedRoadmapOutput; studentData: FormValues; innerRef: React.Ref<HTMLDivElement> }) => {
    const sectionsConfig = useMemo(() => ([
        { id: 'studentProfile', title: 'Student Profile', icon: User, items: [
            `Stream: ${studentData.stream}`,
            `Specialization: ${studentData.specialization}`,
            `Year of Study: ${studentData.yearOfStudy}`,
            `Aiming Career: ${studentData.aimingCareer}`,
        ]},
        { id: 'motivationalNudge', title: 'Motivational Nudge', icon: Lightbulb, content: data.motivationalNudge },
        { id: 'skillRoadmap', title: 'Skill Roadmap', icon: List, items: parseList(data.skillRoadmap) },
        { id: 'toolsToMaster', title: 'Tools to Master', icon: Wrench, items: parseList(data.toolsToMaster) },
        { id: 'timeline', title: 'Estimated Timeline', icon: Calendar, items: parseList(data.timeline) },
        { id: 'projects', title: 'Project Ideas', icon: FlaskConical, items: parseList(data.projects) },
        { id: 'resources', title: 'Learning Resources', icon: Lightbulb, items: parseList(data.resources) },
        { id: 'careerGrowth', title: 'Career Growth', icon: TrendingUp, items: parseList(data.careerGrowth) },
        { id: 'jobMarketInsights', title: 'Job Market Insights', icon: BarChart, items: parseList(data.jobMarketInsights) },
        { id: 'resumeInterviewPrep', title: 'Resume & Interview Prep', icon: Briefcase, items: parseList(data.resumeInterviewPrep) },
    ]), [data, studentData]);


    return (
        <div ref={innerRef} id="pdf-content" className="p-8 bg-white text-gray-800" style={{ width: '210mm' }}>
            <style>{`
              @media print {
                html, body {
                  width: 210mm;
                  height: 297mm;
                }
                @page {
                  size: A4;
                  margin: 15mm;
                }
                .break-inside-avoid {
                  page-break-inside: avoid;
                }
              }
            `}</style>
             <div id="pdf-header" className="flex items-center justify-between pb-4 border-b-2 border-gray-100 mb-6">
                <h1 className="text-2xl font-bold text-gray-800">vidyaan</h1>
                <h2 className="text-lg font-semibold text-gray-600">Your Personalized Career Roadmap</h2>
            </div>
            
            <div className="main-content">
                {sectionsConfig.map(section => {
                     const content = section.items || section.content;
                     if (!content || (Array.isArray(content) && content.length === 0)) return null;
                     
                     return(
                         <div key={section.id} data-pdf-section>
                             <PDFSection title={section.title} icon={section.icon}>
                                {Array.isArray(content) ? content.map((item, index) => <div key={index}>{item}</div>) : content}
                            </PDFSection>
                         </div>
                     )
                })}
            </div>

            <div id="pdf-footer" className="mt-8 pt-4 border-t text-center text-xs text-gray-500">
                <p>Generated by Vidyaan - Your AI Career Guide</p>
            </div>
        </div>
    )
}
